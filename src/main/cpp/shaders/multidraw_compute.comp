#version 310 es

layout(local_size_x = 64) in;

//struct DrawCommand {
////    uint  count;
////    uint  instanceCount;
//    uint  firstIndex;
//    int   baseVertex;
////    uint  reservedMustBeZero;
//};

layout(std430, binding = 0) readonly buffer Input { uint in_indices[]; };
//layout(std430, binding = 1) readonly buffer Draws { DrawCommand draws[]; };
layout(std430, binding = 1) readonly buffer FirstIndex { uint firstIndex[]; };
layout(std430, binding = 2) readonly buffer BaseVertex { int baseVertex[]; };
layout(std430, binding = 3) readonly buffer Prefix { uint prefixSums[]; };
layout(std430, binding = 4) writeonly buffer Output { uint out_indices[]; };

void main() {
    uint outIdx = gl_GlobalInvocationID.x;
    if (outIdx >= prefixSums[prefixSums.length() - 1])
    return;

    // Find out draw call #
    //    int low = 0;
    //    int high = prefixSums.length();
    //    for (low = 0; low < high; ++low) {
    //        if (prefixSums[low] > outIdx) {
    //            break;
    //        }
    //    }

    int low = 0;
    int high = prefixSums.length() - 1;
    while (low < high) {
        int mid = low + (high - low) / 2;
        if (prefixSums[mid] > outIdx) {
            high = mid; // next [low, mid)
        }
        else {
            low = mid + 1; // next [mid + 1, high)
        }
    }

    // figure out which index to take
    //DrawCommand cmd = draws[low];
    uint localIdx = outIdx - ((low == 0) ? 0u : (prefixSums[low - 1]));
    uint inIndex = localIdx + firstIndex[low] / 4u; // elementSize == 4

    // Write out
    out_indices[outIdx] = uint(int(in_indices[inIndex]) + baseVertex[low]);
}
